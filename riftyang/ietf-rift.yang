   module ietf-rift {

    yang-version 1.1;

    namespace "urn:ietf:params:xml:ns:yang:ietf-rift";
    prefix rift;

    import ietf-yang-types {
        prefix "yang";
        reference "RFC6991";
    }

    import ietf-inet-types {
        prefix "inet";
        reference "RFC6991";
    }

    import ietf-routing {
        prefix "rt";
        reference "RFC8022";
    }

    import ietf-interfaces {
        prefix "if";
        reference "RFC7223";
    }

    import ietf-ip {
        prefix "ip";
        reference "RFC7277";
    }

    import ietf-key-chain {
        prefix "key-chain";
        reference "RFC8177";
    }

    import ietf-routing-types {
        prefix "rt-types";
        reference "RFC8294";
    }

    organization
        "IETF RIFT(Routing In Fat Trees) Working Group";

    contact
        "WG Web:   <http://tools.ietf.org/wg/rift/>
         WG List:  <mailto:pim@ietf.org>

         Editor:   Zheng Zhang
                  <mailto:zhang.zheng@zte.com.cn>";

         description
             "The module defines the YANG definitions for RIFT.

          Copyright (c) 2018 IETF Trust and the persons
          identified as authors of the code.  All rights reserved.

          Redistribution and use in source and binary forms, with or
          without modification, is permitted pursuant to, and subject
          to the license terms contained in, the Simplified BSD License
          set forth in Section 4.c of the IETF Trust's Legal Provisions
          Relating to IETF Documents
          (http://trustee.ietf.org/license-info).
          This version of this YANG module is part of RFC 3618; see
          the RFC itself for full legal notices.";

    revision 2018-02-28 {
        description "Initial revision.";
        reference
            "RFC XXXX: A YANG Data Model for RIFT.
             draft-przygienda-rift-04: RIFT: Routing in Fat Trees.";
    }

    /*
     * Features
     */
    feature ztp-mode {
        description "Support Zero Touch Provisioning (ZTP) mode.";
    }

    feature default-route-originate {
        description "Support the orgination of default route. The default route generation must be careful to avoid balck-holing.";
    }

    feature overload {
        description "A node with overload bit set SHOULD NOT advertise any reachability prefixes southbound except locally hosted ones. The leaf node SHOULD set the 'overload' bit on its node TIEs.";
    }

    feature bfd {
        description "Support BFD (RFC5881) function to react quickly to link failures.";
    }

    feature flood-reducing {
        description "Support flood reducing function defined in section 4.2.3.8.";
    }

    feature policy {
        description "Support policy guide information.";
    }

    typedef systemid {
        type string {
            pattern
            '[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}';
        }
        description
           "This type defines RIFT system id using pattern,
            system id looks like : 0143.0438.0100.AeF0";
    }

    typedef level-value {
        type uint8 {
            range "0 .. 64";
        }
        description "The value of node level. The max value is 64.";
    }

    /*
     * Groupings
     */
    grouping level-flag {
        leaf levels {
            type enumeration {
                enum "auto" {
                    description "Node derive level automatically. Only applied if 'configured' is undefined.";
                }
                enum "undefined" {
                    description "The level has not been determined and has not been configured.";
                }
                enum "leaf-only" {
                    description "The node will never leave the 'bottom of the hierarchy'. 'Superspine' and 'configured' value cannot be defined at the same time as this flag. It implies configured value of 0.";
                }
                enum "configured" {
                    description "This means a level value provided manually. When this is defined a node is not participating in ZTP. 'superspine' 'must' not be set when this value is defined; 'leaf-only' can be set only if this value is undefined or set to 0.";
                }
                enum "drived" {
                    description "This means the level value computed via automatic level derivation when 'configured' has not been set to something else than 'undefined'.";
                }
                enum "l2l" {
                    description "This means leaf to leaf. 'superspine' cannot be defined at the same time as this. It implies 'leaf-only' and the according restrictions.";
                }
                enum "superspine" {
                    description "'leaf-only' and 'configured' cannot be defined at the same time as this. It implies 'configured' value of 64.";
                }
            }
            description "This node level information.";
        }
        description "This node level information.";
    }

    grouping level-info {
        uses level-flag;

        leaf name {
            type string;
            description "The name of this node. It won't be used as the key of node, just used for description.";
        }

        leaf value {
            type level-value;
            description "The node's level value.";
        }
        description "The 'level' of node. It indicates the position of node in the Clos and Fat Tree network.";
    }

    grouping base-node-info {
        leaf systemid {
            type systemid;
            mandatory true;
            description "Each node is identified via a SystemID which is 64 bits wide.";
        }
        leaf address {
            type inet:ip-address;
            mandatory true;
            description "The loopback address of node. It can be used to indicate the node with system-id.";
        }
        uses level-info;

        leaf pod {
            type uint16;
            description "Point of Delivery. The self-contained vertical slice of a Clos or Fat Tree network containing normally only level 0 and level 1 nodes. It communicates with nodes in other PoDs via the spine. Nodes in the spine are configured with a PoD of zero.";
        }
        description "The base information of a node.";
    }

    grouping policy {
        description "The policy information. When the type of pgp/kv is set to 'node', node-element is making sense. When the type of pgp/kv is set to other values except 'node', prefix-info is making sense.";
        uses direction-type;
        uses pg-info;
        uses node-element;
        uses prefix-info;
    }

    grouping node {
        uses base-node-info;

        leaf hal {
            type level-value;
            description "The highest defined level value seen from all valid level offers received.";
        }
        leaf ol {
            if-feature overload;
            type boolean;
            description "If the overload bit in TIEs should be set.";
        }
        leaf ztp {
            if-feature ztp-mode;
            type boolean;
            description "If the node is in ztp mode. If this value is set node should work in ztp mode.";
        }
        leaf bfd {
            if-feature bfd;
            type boolean;
            description "If BFD function is enabled to react link failures after neighbor's detection.";
        }
        leaf default-originate {
            if-feature default-route-originate;
            type boolean;
            description "If the node can originate southbound default route. This function should be used carefully to avoid black-holing.";
        }
        leaf flood-reducing {
            if-feature flood-reducing;
            type boolean;
            description "If the node support flood reducing function defined in section 4.2.3.8.";
        }

        description "The information of local node. Includes base information, configurable parameters and features.";
    }

    grouping interface {
        list interfaces {
            key "local-id";
            leaf local-id {
                type uint32;
                mandatory true;
                description "The local id of this interface.";
            }
            leaf name {
                type if:interface-ref;
                description "The interface's name.";
            }
            leaf remote-id {
                type uint32;
                description "The remote-id of this link. The value should be zero if there is no neighbor on it.";
            }
            container interface-type {
                choice link-type {
                    case northbound {
                        description "A link to a node one level up.";
                    }
                    case southbound {
                        description "A link to a node one level down.";
                    }
                    case east-west {
                        description "A link between two nodes in the same level.";
                    }
                    case l2l {
                        description "Leaf to leaf. East-west links at leaf level. It is different from East-west links at other levels.";
                    }
                    description "The type of a link.";
                }
                description "The type of a link.";
            }
            description "The interface information on this node.";
        }
        description "The interface information.";
    }

    grouping community-action {
        description "The actions apply on a matching of community.";
        container action {
            choice prune-nh-required {
                description "For each next-hop in P.next_hop_set, if the next-hop does not have the community, prune that next-hop from P.next_hop_set.";
            }
            choice prune-nh-avoid {
                description "For each next-hop in P.next_hop_set, if the next-hop has the community, prune that next-hop from P.next_hop_set.";
            }
            choice drop-if {
                description "If node X has community M, discard P.";
            }
            choice drop-if-not {
                description "If node X does not have the community M, discard P.";
            }
            choice add-if-node-match {
                description "If the node X has community S, then add community T to P.community_list.";
            }
            description "The actions apply on a matching of community.";
        }
    }

    grouping community {
        container community {
            leaf type {
                type enumeration {
                    enum top {
                        description "The direction type of community is toward to top.";
                    }
                    enum bottom {
                        description "The direction type of community is toward to bottom.";
                    }
                }
                description "community direction type.";
            }
            leaf value {
                type uint64;
                description "community value.";
            }
            uses community-action;
            description "The community type and value.";
        }
        description "Community Attribute.";
    }

    grouping direction-type {
        choice direction-type {
            case northbound {
                description "It means moving towards the top of the Clos or Fat Tree network.";
            }
            case southbound {
                description "It means moving towards the bottom of the Clos or Fat Tree network.";
            }
            description "The direction type.";
        }
        description "The direction type.";
    }

    grouping node-element {
        container node-element {
            leaf node-layer {
                type level-value;
                description "The layer of this element.";
            }
            container node-nbr-info {
                leaf nbr-addr {
                    type inet:ip-address;
                    description "The information used to distinguish a neighbor.";
                }
                leaf distance {
                    type uint32;
                    description "The cost value to arrive this neighbor.";
                }
                leaf nbr-layer {
                    type level-value;
                    description "The layer of this neighbor.";
                }
                leaf cost {
                    type uint32;
                    description "The cost of this neighbor.";
                }
                description "The information of this neighbor.";
            }

            list link-set {
                key "local-id";
                leaf local-id {
                    type uint32;
                    description "The local id of link.";
                }
                description "The link-set information of this TIE.";
            }
            description "The detail information in NodeElement of a TIE.";
        }
        description "The detail information in NodeElement of a TIE.";
    }

    grouping prefix-info {
        container prefix-info {
            leaf layer {
                type inet:ip-prefix;
                description "The prefix information of this TIE.";
            }
            leaf cost {
                type uint32;
                description "The cost of this prefix.";
            }
            description "The detail information in NodeElement of a TIE.";
        }
        description "The detail information in NodeElement of a TIE.";
    }

    grouping tie-type {
        choice tie-type {
            case node {
                description "The node topology information elements.";
            }
            case prefix {
                description "The prefix topology information elements.";
            }
            case pgp-prefix {
                description "The PGP prefix information elements.";
            }
            case kv {
                description "The Key Value information elements.";
            }
            description "The possible TIE's types.";
        }
        description "The possible TIE's types.";
    }

    grouping tie-id {
        uses direction-type;
        uses tie-type;

        container originator {
            uses base-node-info;
            description "The originator information of this TIE.";
        }

        container nbr {
            uses base-node-info;
            description "The neighbor information received this TIE from.";
        }
        description "TIE is the acronym for 'Topology Information Element'. TIEs are exchanged between RIFT nodes to describe parts of a network such as links and address prefixes. This is the TIE identification information.";
    }

    grouping tie-info {
        leaf seq {
            type uint32;
            description "The sequence number of a TIE.";
        }
        leaf lifetime {
            type uint16 {
                range "1 .. 65535";
            }
            description "The lifetime of a TIE.";
        }
        uses node-element;
        uses prefix-info;
        description "TIE is the acronym for 'Topology Information Element'. TIEs are exchanged between RIFT nodes to describe parts of a network such as links and address prefixes. This TIE info is used to indicate the state of this TIE. When the type of this TIE is set to 'node', the node-element is making sense. When the type of this TIE is set to other types except for 'node', the prefix-info is making sense.";
    }

    grouping pg-info {
        description "Information that is passed in either southbound direction or north-bound direction by the means of diffusion and can be filtered via policies.  Policy-Guidedn Prefixes and KV Ties are examples of Policy-Guided Information.";
        container pgp {
            uses tie-id;
            description "Policy-Guided Prefixes allow to support traffic engineering that cannot be achieved by the means of SPF computation or normal node and prefix S-TIE origination.  S-PGPs are propagated in south direction only and N-PGPs follow northern direction strictly.";
        }
        container kv-tie {
            uses tie-id;
            description "A S-TIE that is carrying a set of key value pairs.  It can be used to distribute information in the southbound direction within the protocol.";
        }
    }

    grouping algorithm {
        choice algorighm-type {
            case spf {
                description "The algorithm is SPF.";
            }
            description "The possible algorithm types.";
        }
        description "The computation algorithm types.";
    }

    grouping nh-set {
        list next-hop-set {
            key "local-id";
            leaf local-id {
                type uint32;
                description "The local id of interface.";
            }
            /*uses link-info;*/
            description "The next-hop set.";
        }
        description "The next-hop set.";
    }


     /*
      * Data nodes
      */
    augment "/rt:routing/rt:control-plane-protocols/rt:control-plane-protocol" {
        description "RIFT ( Routing in Fat Trees ) YANG model.";
        container rift {
            presence "Container for RIFT protocol.";
            description "RIFT configuration data.";

            container node-info {
                description "The node information about RIFT.";
                uses node;
                uses interface;
                uses community;
                container policy-info {
                    if-feature policy;
                    uses policy;
                    description "The policy information.";
                }
            }
            container neighbor {
                config false;
                list nbrs {
                    key "systemid remote-id";
                    leaf systemid {
                        type systemid;
                        description "The systemid of this neighbor.";
                    } 
                    leaf remote-id {
                        type uint32;
                        description "The remote-id to reach this neighbor.";
                    }
                    leaf distance {
                        type uint32;
                        description "The cost value to arrive this neighbor.";
                    }
                    leaf local-id {
                        type uint32;
                        description "The local-id of link connect to this neighbor.";
                    }
                    /*uses nbr-status;*/ /*The status will be added in later version.*/
                    description "The information of a neighbor.";
                }
                description "The neighbor's information.";
            }//neighbor

            container database {
                config false;
                list ties {
                    key "tie-key";
                    leaf tie-key {
                        type uint32;
                        description "The index of a TIE.";
                    }
                    uses tie-id;
                    uses tie-info;
                    description "The detail information of a TIE.";
                }
                description "The TIEs information in database.";
            }//database

            container kv-store {
                config false;
                list kvs {
                    key "kv-key";
                    leaf kv-key {
                        type uint32;
                        description "The index of a kv pair.";
                    }
                    uses tie-id;
                    uses nh-set;
                    uses algorithm;
                    uses node-element;
                    uses prefix-info;
                    description "The information used to distinguish a Key/Value pair. When the type of kv is set to 'node', node-element is making sense. When the type of kv is set to other values except 'node', prefix-info is making sense.";
                }
                description "The Key/Value store information.";
            }//kv-store
        }//rift
    }//augment*/


    /*
     * RPCs
     */


    /*
     * Notifications
     */
    notification error-set {
        description "The errors notification of RIFT.";
        leaf tie-level {
            type level-value;
            description "The level is undefined in the LIEs.";
        }
        container neighbor {
            leaf layer {
                type level-value;
                description "The neighbor's layer is not valid.";
            }
            uses base-node-info;
            description "The neighbor errors set.";
        }
    }
}